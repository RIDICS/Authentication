using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Hosting;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Xml;
using System.Xml.Serialization;
using Ridics.Authentication.Core.Configuration;
using Ridics.Authentication.Core.Managers;
using Ridics.Authentication.Core.Models;
using Ridics.Authentication.Modules.Shared;
using Ridics.Authentication.Service.Models;
using Ridics.Authentication.Service.Models.DynamicModule;
using Ridics.Authentication.Service.Utils;

namespace Ridics.Authentication.Service.DynamicModule
{
    public class DynamicModuleConfigurationManager
    {
        public const string ModuleConfigurationFile = "modules-autogenerated.xml";

        private readonly string m_contentRootPath;
        private readonly LiveManager m_liveManager;
        private readonly DynamicModuleManager m_dynamicModuleManager;
        private readonly DynamicModuleProvider m_dynamicModuleProvider;
        private readonly DynamicModuleConfiguration m_dynamicModuleConfiguration;

        public DynamicModuleConfigurationManager(
            IHostingEnvironment hostingEnvironment,
            LiveManager liveManager,
            DynamicModuleManager dynamicModuleManager,
            DynamicModuleProvider dynamicModuleProvider,
            DynamicModuleConfiguration dynamicModuleConfiguration
        )
        {
            m_contentRootPath = hostingEnvironment.ContentRootPath;
            m_liveManager = liveManager;
            m_dynamicModuleManager = dynamicModuleManager;
            m_dynamicModuleProvider = dynamicModuleProvider;
            m_dynamicModuleConfiguration = dynamicModuleConfiguration;
        }

        public void DumpConfigurationAndRestartIfChanged()
        {
            var dynamicModulesRequest = m_dynamicModuleManager.FindAllDynamicModule();
            var dynamicModules = dynamicModulesRequest.Result;

            var checksum = ComputeChecksum(dynamicModules);

            if (!checksum.Equals(m_dynamicModuleConfiguration.Checksum))
            {
                var configuration = BuildConfiguration(checksum, dynamicModules);

                DumpConfigurationToXml(configuration);

                m_liveManager.RebuildAndRestart();
            }
        }

        private string ComputeChecksum(IList<DynamicModuleModel> dynamicModules)
        {
            var checksum = ComputeConfigurationChecksum(
                dynamicModules.OrderBy(x => x.Id)
            );

            return checksum;
        }

        private string ComputeConfigurationChecksum(
            IOrderedEnumerable<DynamicModuleModel> dynamicModuleEntities
        )
        {
            var stringBuilder = new StringBuilder();

            foreach (var moduleConfiguration in m_dynamicModuleProvider.GetDefaultModuleConfigurations())
            {
                stringBuilder.Append(moduleConfiguration == null ? "<null>" : moduleConfiguration.GetStateHash());
            }

            foreach (var dynamicModuleModel in dynamicModuleEntities)
            {
                stringBuilder.Append(
                    dynamicModuleModel.SerializeState()
                );
            }

            using (var hash = SHA256.Create())
            {
                return string.Concat(
                    hash.ComputeHash(Encoding.UTF8.GetBytes(
                        stringBuilder.ToString()
                    )).Select(item => item.ToString("x2"))
                );
            }
        }

        private ConfigurationRoot BuildConfiguration(string checksum, IList<DynamicModuleModel> dynamicModules)
        {
            var standaloneDynamicModules = dynamicModules.Where(x => !string.IsNullOrEmpty(x.Name)).ToDictionary(x => x.Name);

            var configuration = new ConfigurationRoot
            {
                Module =
                {
                    Checksum = checksum,
                    LastConfigurationReload = DateTime.Now
                }
            };

            // moduleIndex is workaround for https://github.com/aspnet/Configuration/issues/745
            var moduleIndex = 0;
            foreach (var moduleContext in m_dynamicModuleProvider.ModuleContexts)
            {
                var moduleInstanceConfiguration = new DynamicModuleInstanceConfiguration
                {
                    AssemblyName = moduleContext.LibraryModuleConfiguration.AssemblyName,
                    Name = moduleIndex,
                    Configuration = moduleContext.DefaultModuleConfiguration
                };
                moduleIndex++;

                var moduleName = moduleContext.DefaultModuleConfiguration?.Name ?? moduleContext.ModuleConfiguration?.Name;

                if (moduleName != null)
                {
                    if (standaloneDynamicModules.ContainsKey(moduleName))
                    {
                        standaloneDynamicModules.Remove(moduleName);
                    }

                    var dynamicModuleEntityRequest = m_dynamicModuleManager.GetByName(
                        moduleName
                    );

                    if (dynamicModuleEntityRequest.Succeeded && dynamicModuleEntityRequest.Result != null)
                    {
                        var dynamicModuleEntity = dynamicModuleEntityRequest.Result;

                        // disable module load when configuration version are no longer compatible
                        if (
                            moduleInstanceConfiguration.Configuration != null &&
                            dynamicModuleEntity.ConfigurationVersion.Major < moduleContext.LibModuleInfo.Version.Major
                        )
                        {
                            moduleInstanceConfiguration.Configuration.Enable = false;
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(dynamicModuleEntity.ConfigurationString))
                            {
                                var moduleConfiguration = dynamicModuleEntity.Configuration(moduleContext.ModuleConfigType);

                                if (moduleInstanceConfiguration.Configuration == null)
                                {
                                    moduleInstanceConfiguration.Configuration = moduleConfiguration;
                                }
                                else
                                {
                                    moduleInstanceConfiguration.Configuration.Hydrate(moduleConfiguration);
                                }
                            }
                        }
                    }
                }

                configuration.Module.Configuration.Add(
                    moduleInstanceConfiguration
                );
            }

            // standalone module / not loaded module configuration
            foreach (var standaloneDynamicModule in standaloneDynamicModules.Values)
            {
                var moduleContext = m_dynamicModuleProvider.ModuleContexts.FirstOrDefault(
                    x => x.LibModuleInfo.ModuleGuid.Equals(standaloneDynamicModule.ModuleGuid)
                );

                if (moduleContext == null)
                {
                    // unloaded module?
                    continue;
                }

                var moduleInstanceConfiguration = new DynamicModuleInstanceConfiguration
                {
                    AssemblyName = moduleContext.LibraryModuleConfiguration.AssemblyName,
                    Name = moduleIndex,
                    Configuration = (IModuleConfiguration) Activator.CreateInstance(moduleContext.ModuleConfigType),
                };
                moduleIndex++;

                if (!string.IsNullOrEmpty(standaloneDynamicModule.ConfigurationString))
                {
                    var moduleConfiguration = standaloneDynamicModule.Configuration(moduleContext.ModuleConfigType);

                    moduleInstanceConfiguration.Configuration.Hydrate(moduleConfiguration);
                }

                // disable module load when configuration version are no longer compatible
                if (standaloneDynamicModule.ConfigurationVersion.Major < moduleContext.LibModuleInfo.Version.Major)
                {
                    moduleInstanceConfiguration.Configuration.Enable = false;
                }

                configuration.Module.Configuration.Add(
                    moduleInstanceConfiguration
                );
            }

            return configuration;
        }

        private void DumpConfigurationToXml(ConfigurationRoot configuration)
        {
            var xmlSerializer = new XmlSerializer(typeof(ConfigurationRoot));

            var xmlWriterSettings = new XmlWriterSettings
            {
                Indent = true,
                OmitXmlDeclaration = true
            };

            using (var file = File.Open(
                Path.Join(
                    m_contentRootPath,
                    ModuleConfigurationFile
                ),
                FileMode.Create,
                FileAccess.Write,
                FileShare.Write
            ))
            using (var textWriter = XmlWriter.Create(file, xmlWriterSettings))
            {
                xmlSerializer.Serialize(textWriter, configuration, XmlNamespaceFactory.CreateEmptyNamespace());
            }
        }
    }
}

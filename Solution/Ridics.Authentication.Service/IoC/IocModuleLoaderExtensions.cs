using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc.Razor;
using Microsoft.Extensions.FileProviders;
using Microsoft.Extensions.Logging;
using Ridics.Authentication.Modules.Shared;
using Ridics.Authentication.Service.Helpers.DynamicModule;
using Ridics.Authentication.Service.Models;
using Ridics.Authentication.Service.Models.DynamicModule;
using Scalesoft.Localization.Core.Dictionary;
using Scalesoft.Localization.Core.Manager;

namespace Ridics.Authentication.Service.IoC
{
    public static class IocModuleLoaderExtensions
    {
        public static DynamicModuleProvider LoadModules(
            this IServiceCollection services,
            IConfiguration configuration,
            IHostingEnvironment hostingEnvironment,
            ILoggerFactory loggerFactory
        )
        {
            var configurationSection = configuration.GetSection("Modules");

            var moduleAssemblies = GetAssemblies(configurationSection, loggerFactory);

            var modules = services.RegisterModules(moduleAssemblies);

            services.InitialiseModules(modules, hostingEnvironment.EnvironmentName, loggerFactory);

            var dynamicModuleProvider = new DynamicModuleProvider(modules);

            services.AddSingleton(dynamicModuleProvider);
            services.AddSingleton<IModuleLocalization, DynamicModuleLocalization>();

            return dynamicModuleProvider;
        }

        public static void ModuleConfigureLocalization(
            this IApplicationBuilder applicationBuilder
        )
        {
            var applicationServices = applicationBuilder.ApplicationServices;

            var localization = applicationServices.GetService<IFileDictionaryManager>();
            var dictionaryFactory = applicationServices.GetService<IDictionaryFactory>();

            foreach (
                var moduleContext in applicationServices.GetService<DynamicModuleProvider>()
                    // make sure each localization will load once
                    .ModuleContexts.GroupBy(x => x.LibModuleInfo, (key, result) => result.First()).ToList()
            )
            {
                localization.ConfigureLocalizationInModule(dictionaryFactory, moduleContext);
            }
        }

        public static void LoadDynamicControllers(
            this IMvcCoreBuilder mvcBuilder,
            DynamicModuleProvider dynamicModuleProvider
        )
        {
            mvcBuilder.ConfigureApplicationPartManager(p =>
                p.FeatureProviders.Add(
                    new DynamicModuleControllerFeatureProvider(
                        dynamicModuleProvider.ModuleContexts.GroupBy(x => x.LibModuleInfo.ModuleGuid).Select(x => x.First()).ToList()
                    )
                )
            );
        }

        private static IList<ModuleContext> GetAssemblies(IConfiguration configuration, ILoggerFactory loggerFactory)
        {
            var assemblyList = new List<ModuleContext>();

            var defaultConfigurationSection = configuration.GetSection("DefaultConfiguration"); // module.*.json5
            var configurationSection = configuration.GetSection("Configuration"); // modules-autogenerated.xml

            var loadedAssemblies = new ConcurrentDictionary<string, Assembly>();
            var moduleCandidatePerAssembly = new ConcurrentDictionary<string, IDictionary<string, ModuleContextCandidate>>();
            var standaloneModuleCandidatePerAssembly = new ConcurrentDictionary<string, ModuleContextCandidate>();

            foreach (var libraryModuleKeySection in defaultConfigurationSection.GetChildren())
            {
                var libraryModuleSection = defaultConfigurationSection.GetSection(libraryModuleKeySection.Key);
                var generalModuleConfiguration = new LibraryModuleConfiguration();
                libraryModuleSection.Bind(generalModuleConfiguration);

                var assembly = loadedAssemblies.GetOrAdd(
                    generalModuleConfiguration.AssemblyName,
                    Assembly.Load
                );
                var moduleCandidate = moduleCandidatePerAssembly.GetOrAdd(
                    generalModuleConfiguration.AssemblyName,
                    (key) => new Dictionary<string, ModuleContextCandidate>()
                );

                var moduleConfigType = assembly.ExportedTypes.FirstOrDefault(
                    x => typeof(IModuleConfiguration).IsAssignableFrom(x)
                );
                var moduleConfigurationManagerType = assembly.ExportedTypes.FirstOrDefault(
                    x => typeof(IModuleConfigurationManager).IsAssignableFrom(x)
                );

                if (moduleConfigType != null)
                {
                    var moduleConfigurationSection = libraryModuleSection.GetSection("Configuration");
                    IModuleConfiguration defaultModuleConfiguration = null;

                    if (moduleConfigurationSection.GetChildren().Any())
                    {
                        defaultModuleConfiguration = Activator.CreateInstance(moduleConfigType) as IModuleConfiguration;
                        moduleConfigurationSection.Bind(defaultModuleConfiguration);
                    }

                    IModuleConfigurationManager moduleConfigurationManager = null;
                    if (moduleConfigurationManagerType != null)
                    {
                        moduleConfigurationManager =
                            Activator.CreateInstance(moduleConfigurationManagerType) as IModuleConfigurationManager;
                    }

                    var embeddedFileProvider = new EmbeddedFileProvider(assembly);

                    if (string.IsNullOrEmpty(defaultModuleConfiguration?.Name))
                    {
                        assemblyList.Add(
                            new ModuleContext(
                                assembly,
                                moduleConfigType,
                                generalModuleConfiguration,
                                moduleConfigurationManager,
                                embeddedFileProvider,
                                null,
                                defaultModuleConfiguration
                            )
                        );
                    }
                    else
                    {
                        moduleCandidate.Add(
                            defaultModuleConfiguration.Name,
                            new ModuleContextCandidate(
                                assembly,
                                moduleConfigType,
                                generalModuleConfiguration,
                                moduleConfigurationManager,
                                embeddedFileProvider,
                                defaultModuleConfiguration
                            )
                        );
                    }

                    standaloneModuleCandidatePerAssembly.GetOrAdd(
                        generalModuleConfiguration.AssemblyName,
                        (key) => new ModuleContextCandidate(
                            assembly,
                            moduleConfigType,
                            generalModuleConfiguration,
                            moduleConfigurationManager,
                            embeddedFileProvider,
                            defaultModuleConfiguration
                        )
                    );
                }
            }

            foreach (var libraryModuleKeySection in configurationSection.GetChildren())
            {
                var libraryModuleSection = configurationSection.GetSection(libraryModuleKeySection.Key);
                var generalModuleConfiguration = new LibraryModuleConfiguration();
                libraryModuleSection.Bind(generalModuleConfiguration);

                if (
                    !loadedAssemblies.TryGetValue(generalModuleConfiguration.AssemblyName, out var assembly)
                    || !moduleCandidatePerAssembly.TryGetValue(generalModuleConfiguration.AssemblyName, out var moduleCandidates)
                )
                {
                    // something went terribly wrong, try to keep it alive by continue
                    continue;
                }


                var moduleConfigType = assembly.ExportedTypes.FirstOrDefault(
                    x => typeof(IModuleConfiguration).IsAssignableFrom(x)
                );

                if (moduleConfigType != null)
                {
                    IModuleConfiguration moduleConfiguration = null;

                    var configurationInstanceSection = libraryModuleSection.GetSection("Configuration");
                    if (configurationInstanceSection.GetChildren().Any())
                    {
                        moduleConfiguration = Activator.CreateInstance(moduleConfigType) as IModuleConfiguration;
                        configurationInstanceSection.Bind(moduleConfiguration);
                    }

                    if (
                        moduleConfiguration != null
                        && !string.IsNullOrEmpty(moduleConfiguration.Name)
                        && moduleCandidates.TryGetValue(moduleConfiguration.Name, out var moduleCandidate)
                    )
                    {
                        assemblyList.Add(
                            new ModuleContext(
                                moduleCandidate.Assembly,
                                moduleCandidate.ModuleConfigType,
                                moduleCandidate.LibraryModuleConfiguration,
                                moduleCandidate.ModuleConfigurationManager,
                                moduleCandidate.EmbeddedFileProvider,
                                moduleConfiguration,
                                moduleCandidate.DefaultModuleConfiguration
                            )
                        );

                        moduleCandidates.Remove(moduleConfiguration.Name);
                    }
                    else if (
                        moduleConfiguration != null
                        && standaloneModuleCandidatePerAssembly.TryGetValue(
                            generalModuleConfiguration.AssemblyName,
                            out var standaloneModuleCandidate
                        )
                    )
                    {
                        assemblyList.Add(
                            new ModuleContext(
                                standaloneModuleCandidate.Assembly,
                                standaloneModuleCandidate.ModuleConfigType,
                                standaloneModuleCandidate.LibraryModuleConfiguration,
                                standaloneModuleCandidate.ModuleConfigurationManager,
                                standaloneModuleCandidate.EmbeddedFileProvider,
                                moduleConfiguration,
                                standaloneModuleCandidate.DefaultModuleConfiguration
                            )
                        );
                    }
                    else
                    {
                        loggerFactory?.CreateLogger<IModuleConfiguration>().LogWarning(
                            string.Format(
                                "Dynamic module of type '{0}' lack of configuration or name, skipping. Assuming only make available dynamic module for other purpose",
                                generalModuleConfiguration.AssemblyName
                            )
                        );
                    }
                }
            }

            foreach (var moduleCandidates in moduleCandidatePerAssembly.Values)
            {
                foreach (var moduleCandidate in moduleCandidates.Values)
                {
                    assemblyList.Add(
                        new ModuleContext(
                            moduleCandidate.Assembly,
                            moduleCandidate.ModuleConfigType,
                            moduleCandidate.LibraryModuleConfiguration,
                            moduleCandidate.ModuleConfigurationManager,
                            moduleCandidate.EmbeddedFileProvider,
                            null,
                            moduleCandidate.DefaultModuleConfiguration
                        )
                    );
                }
            }

            return assemblyList;
        }

        private static IList<ModuleContext> RegisterModules(
            this IServiceCollection services,
            IList<ModuleContext> moduleContexts
        )
        {
            foreach (var moduleContext in moduleContexts)
            {
                var moduleInfoType = moduleContext.Assembly.ExportedTypes.FirstOrDefault(x => typeof(ILibModuleInfo).IsAssignableFrom(x));
                if (moduleInfoType == null)
                {
                    throw new InvalidOperationException(
                        $"Trying to load module from assembly {moduleContext.Assembly}, but no implementation of {typeof(ILibModuleInfo)} found"
                    );
                }

                var moduleInfoInstance = Activator.CreateInstance(moduleInfoType) as ILibModuleInfo;
                services.AddSingleton(typeof(ILibModuleInfo), moduleInfoInstance);
                //services.AddSingleton(typeof(IModuleConfiguration), moduleContext.ModuleConfiguration);

                moduleContext.LibModuleInfo = moduleInfoInstance;
            }

            return moduleContexts;
        }

        private static void InitialiseModules(
            this IServiceCollection services,
            IEnumerable<ModuleContext> moduleContexts,
            string hostingEnvironmentName,
            ILoggerFactory loggerFactory
        )
        {
            var configurationLogger = loggerFactory?.CreateLogger<IModuleConfiguration>();
            foreach (var moduleContext in moduleContexts)
            {
                services.Configure<RazorViewEngineOptions>(options => { options.FileProviders.Add(moduleContext.EmbeddedFileProvider); });
                if (moduleContext.ModuleConfiguration == null)
                {
                    configurationLogger?.LogInformation(
                        string.Format("Dynamic module '{0}' of type '{1}' miss configuration, initialisation skipped.",
                            moduleContext.LibModuleInfo.ModuleGuid,
                            moduleContext.LibraryModuleConfiguration.AssemblyName
                        )
                    );
                    continue;
                }

                if (!moduleContext.ModuleConfiguration.Enable)
                {
                    configurationLogger?.LogInformation(
                        string.Format("Dynamic module '{0}' is disabled by configuration", moduleContext.ModuleConfiguration.Name)
                    );
                    continue;
                }

                if (!moduleContext.ModuleConfiguration.IsValid(out var errors))
                {
                    foreach (var error in errors)
                    {
                        configurationLogger?.LogError(
                            string.Format(
                                "Dynamic module '{0}' of type '{1}': {2} throw error: {3}",
                                moduleContext.ModuleConfiguration.Name,
                                moduleContext.LibModuleInfo.ModuleGuid,
                                moduleContext.LibraryModuleConfiguration.AssemblyName,
                                error
                            )
                        );
                    }

                    continue;
                }

                services.InitialiseModule(moduleContext, hostingEnvironmentName, loggerFactory);
            }
        }

        private static void InitialiseModule(
            this IServiceCollection services,
            ModuleContext moduleContext,
            string hostingEnvironmentName,
            ILoggerFactory loggerFactory
        )
        {
            moduleContext.LibModuleInfo.ContainerRegistration?.Install(services, moduleContext, hostingEnvironmentName, loggerFactory);
        }

        private static void ConfigureLocalizationInModule(
            this IFileDictionaryManager localization,
            IDictionaryFactory dictionaryFactory,
            ModuleContext moduleContext
        )
        {
            var localizationFiles = moduleContext.LibModuleInfo.GetLocalizationFiles(moduleContext.Assembly);
            if (localizationFiles == null) return;
            foreach (var localizationFile in localizationFiles)
            {
                using (var stream = localizationFile.FileStream)
                {
                    localization.AddDictionaryToHierarchyTrees(
                        dictionaryFactory.CreateDictionary(stream)
                    );
                }
            }
        }
    }
}
